/* eslint-disable no-unused-vars */
import { savingNewGroup, addNewGroup, setActiveGroup, setGroups, setErrorMessage } from "./teachersSlice";
import { api } from "../../api";
import { getCurrentUserToken } from "../../firebase/providers";
import { loadGroups } from "../../helpers/loadGroups";

export const startCreatingGroup = (groupName) => {

    return async (dispatch) => {

        dispatch(savingNewGroup());

        const newGroup = {
            GROUP_NAME: groupName,
            GROUP_CODE: '',
            ACCESS_TOKEN: '', // This will be generated by the backend
        }

        try {

            // Retrieves the current user's token to send it to the Flask backend and verify the user's identity
            const token = await getCurrentUserToken();

            // Calls the Flask-Axios backend to create the group using the token
            const resp = await api.post('/group/create', {
                groupName,
            }, {
                headers: {
                    'Authorization': `Bearer ${token.token}`,
                    'Content-Type': 'application/json',
                }
            })

            // Spread the original group object and add the accessToken from the response
            const newGroupCopy = { ...newGroup };
            newGroupCopy.ACCESS_TOKEN = resp.data.ACCESS_TOKEN;
            newGroupCopy.GROUP_CODE = resp.data.GROUP_CODE;

            dispatch(addNewGroup(newGroupCopy));
            dispatch(setActiveGroup(newGroupCopy));

        } catch (error) {
            return dispatch(setErrorMessage(error.message));
        }

    }
}

export const startLoadingGroups = () => {

    return async (dispatch) => {

        const groups = await loadGroups();
        dispatch(setGroups(groups));
    }

}
